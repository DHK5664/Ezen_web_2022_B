/*alert('1.js실행')*/
// 2. 함수 호출	: 
	//1. js	  : 함수명()
	//2. html : <마크업 이벤트속성="함수명()"/>
/*클릭이벤트 ()*/

// 4. 배열선언	[버튼의 상태를 저장하는 배열 -> null : 빈자리]
let 버튼목록현황 = [null , null , null ,
				null , null , null ,
				null , null , null ]
//1. 사용자가 버튼 클릭했을때 실행되는 함수 / 1. 함수정의만들기

function 클릭이벤트(버튼번호){ // f start
//function	: 함수 정의할때 사용되는 키워드
//클릭이벤트	: 함수명[아무거나]
// ()  :인수	: 해당함수를 호출할 때 함수로 들어오는 값/데이터
// return	: 반환값	: 해당 함수가 종료될 때 호출했던 곳으로 보내는 값/데이터
	console.log('2.클릭함수실행 : ' + 버튼번호 )
	//1. 선택된 번호와 알모양을 알두기 함수 전달하고 반환이 false이면 알두기 실패/true 성공
		// ! : 반대/부정 false -> true / true -> false
	if( !알두기(버튼번호 , 'O')){return;}
	if(결과()){return;}
	// 2. 컴퓨터 차례 무한루프 [정상적으로 알 두기 전까지](사람은 실패시 다시클릭하면 되지만 컴퓨터는 아니므로)
	while(true){//w s
		let 컴퓨터번호 = parseInt( Math.random()*9 )+1	//  정수 1~9 사이의 난수 생성 //parseInt( Math.random()*9 )   : 0~9
		if(알두기(컴퓨터번호 , 'X')){결과(); return;}
	}// w end
	
}	// f end


//2. 알두기 [반환값 : 알 정상적으로 두었는지 확인 false : 0 :실패 true : 1 :성공->신호번호]
function 알두기( 버튼번호,알모양 ){//f s
	// 1. <div> 버튼 목록 가져와서 배열에 저장	[div 9개 호출]
	//querySelectorAll = 같은 이름의 식별자 다 가져오는거
	let 버튼목록 = document.querySelectorAll('.버튼'); // 얘가 배열이 되는데 싹 다 가져오므로 [div1,div2,div3...]일케 대서 그럼
	console.log(버튼목록)
	// 2. 배열의 상태 변경 //* 만약에 빈자리가 아니면 실패 false 반환
	if(버튼목록현황[버튼번호-1] != null ){ return false;	}	
	//3. 알모양과 상태변경 // 클릭된 번호의 div 찾기 [선택번호 -1] //-1 : 인덱스는 0부터 시작해서
	버튼목록[버튼번호-1].innerHTML = 알모양; //html 알 상태 변경
	버튼목록현황[버튼번호-1] = 알모양;			//js 알 상태 변경 (어케보면 백엔드)
	console.log( 버튼목록현황 )
	// 4. 성공 true 반환
	return true;// 성공했으면 true 반환
}// f e
// 3. 결과 함수 [사람/컴퓨터 알 두기 성공했을때 1. 승리 2.패배 3. 무승부[빈자리없으면] ]
function 결과(){ 
	//1. 가로 승리자 판단
	// * 배열의 초기값이 모두 null 이기 떄문에 null 제외
	for(let i = 0 ; i<=6 ; i+=3 ){//i 는 0부터 6까지 3씩증가 반복처리 -> 3회반복( 0  3  6)
		if(버튼목록현황[i] != null && 버튼목록현황[i] == 버튼목록현황[i+1] && 버튼목록현황[i+1] == 버튼목록현황[i+2]){
			결과출력(버튼목록현황[i])	// 버튼목록현황[i] = 승리자의 알모양
			return true;	// * 승리자 존재하는 신호;
		}// if e
	}// for e
	
	//2. 세로 승리자 판단
	for(let i = 0 ; i<=2 ; i++){// i는 0부터 2까지 1씩증가 반복처리 -> 3회반복 : 0 1 2
		if(버튼목록현황[i] != null && 버튼목록현황[i] == 버튼목록현황[i+3] && 버튼목록현황[i+3] == 버튼목록현황[i+6]){
			결과출력(버튼목록현황[i])
			return true;	// * 승리자 존재하는 신호;
		}
	}// for e
	
	//3. 대각선 승리자 판단 [2개]
	if(버튼목록현황[0] != null && 버튼목록현황[0]==버튼목록현황[4]&&버튼목록현황[4]==버튼목록현황[8] ){
		결과출력(버튼목록현황[0])
		return true;	// * 승리자 존재하는 신호;
	}	
	if(버튼목록현황[2] != null && 버튼목록현황[2]==버튼목록현황[4]&&버튼목록현황[4]==버튼목록현황[6] ){
		결과출력(버튼목록현황[2])
		return true;	// * 승리자 존재하는 신호;
	}
	
	//4. 무승부 판단
	let 빈자리수 = 0;
	for(버튼 of 버튼목록현황){
		if(버튼 == null){ 빈자리수++; }
	}//for end
	
	if(빈자리수 == 0 ){ 결과출력('-'); return true; }
	
	return false; // 아직 승리/무승부 아닐경우
	
}// f e


//4. 게임 승리자 출력
function 결과출력( 알모양 ){
	
	//1. 출력할 위치의 <div> 가져오기
	let 게임판 = document.querySelector('.게임판')
	
	//2.
	if(알모양 == '-'){ // 만약에 알 모양이 '-' 무승부
		게임판.innerHTML = '무승부'
	}else{		// 만약에 알 모양이 '-' 아니면 승리자 알 'O'or'X'
		게임판.innerHTML = 알모양 + '승리'
	}
}

/*

	버튼목록현황
		[0] [1] [2]
		[3]	[4]	[5]
		[6]	[7]	[8]

		- 버튼목록현황 승리판단 3가지
				1. 가로로 이겼을 때		: 0 1 2 / 3 4 5 / 6 7 8
				2. 세로로 이겼을 때		: 0 3 6 / 1 4 7 / 2 5 8
				3. 대각선으로 이겼을 때	: 0 4 8 / 2 4 6

		-무승부 : 알이 모두 존재했을때	= null 0개이면 -> 빈자리가 없다.
		
*/


















